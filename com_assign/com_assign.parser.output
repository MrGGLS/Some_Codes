Nonterminals useless in grammar

    iniv


State 17 conflicts: 5 shift/reduce
State 35 conflicts: 1 shift/reduce


Grammar

    0 $accept: topList $end

    1 stmt: IF exp THEN list
    2     | IF exp THEN list ELSE list
    3     | exp
    4     | exp AND exp
    5     | stmt ';' stmt
    6     | stmt ';'

    7 list: %empty
    8     | exp

    9 exp: exp CMP exp
   10    | exp '+' exp
   11    | exp '-' exp
   12    | exp '*' exp
   13    | exp '/' exp
   14    | '(' exp ')'
   15    | '{' exp '}'
   16    | '-' exp
   17    | NUM
   18    | SKIP
   19    | INT exp
   20    | NAME
   21    | NAME '=' exp
   22    | NAME ASSIGN1 exp
   23    | NAME ASSIGN2 exp

   24 topList: %empty
   25        | topList stmt EOI


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 14
    ')' (41) 14
    '*' (42) 12
    '+' (43) 10
    '-' (45) 11 16
    '/' (47) 13
    ';' (59) 5 6
    '=' (61) 21
    '{' (123) 15
    '}' (125) 15
    error (256)
    NUM <i> (258) 17
    NAME <s> (259) 20 21 22 23
    IF (260) 1 2
    THEN (261) 1 2
    ELSE (262) 2
    AND (263) 4
    SKIP (264) 18
    INT (265) 19
    EOI (266) 25
    CMP <fn> (267) 9
    ASSIGN1 (268) 22
    ASSIGN2 (269) 23
    UMINUS (270)


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    stmt <a> (27)
        on left: 1 2 3 4 5 6
        on right: 5 6 25
    list <a> (28)
        on left: 7 8
        on right: 1 2
    exp <a> (29)
        on left: 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
        on right: 1 2 3 4 8 9 10 11 12 13 14 15 16 19 21 22 23
    topList (30)
        on left: 24 25
        on right: 0 25


State 0

    0 $accept: . topList $end

    $default  reduce using rule 24 (topList)

    topList  go to state 1


State 1

    0 $accept: topList . $end
   25 topList: topList . stmt EOI

    $end  shift, and go to state 2
    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    IF    shift, and go to state 5
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    stmt  go to state 11
    exp   go to state 12


State 2

    0 $accept: topList $end .

    $default  accept


State 3

   17 exp: NUM .

    $default  reduce using rule 17 (exp)


State 4

   20 exp: NAME .
   21    | NAME . '=' exp
   22    | NAME . ASSIGN1 exp
   23    | NAME . ASSIGN2 exp

    '='      shift, and go to state 13
    ASSIGN1  shift, and go to state 14
    ASSIGN2  shift, and go to state 15

    $default  reduce using rule 20 (exp)


State 5

    1 stmt: IF . exp THEN list
    2     | IF . exp THEN list ELSE list

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 16


State 6

   18 exp: SKIP .

    $default  reduce using rule 18 (exp)


State 7

   19 exp: INT . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 17


State 8

   16 exp: '-' . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 18


State 9

   14 exp: '(' . exp ')'

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 19


State 10

   15 exp: '{' . exp '}'

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 20


State 11

    5 stmt: stmt . ';' stmt
    6     | stmt . ';'
   25 topList: topList stmt . EOI

    EOI  shift, and go to state 21
    ';'  shift, and go to state 22


State 12

    3 stmt: exp .
    4     | exp . AND exp
    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp

    AND  shift, and go to state 23
    CMP  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 3 (stmt)


State 13

   21 exp: NAME '=' . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 29


State 14

   22 exp: NAME ASSIGN1 . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 30


State 15

   23 exp: NAME ASSIGN2 . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 31


State 16

    1 stmt: IF exp . THEN list
    2     | IF exp . THEN list ELSE list
    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp

    THEN  shift, and go to state 32
    CMP   shift, and go to state 24
    '+'   shift, and go to state 25
    '-'   shift, and go to state 26
    '*'   shift, and go to state 27
    '/'   shift, and go to state 28


State 17

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   19    | INT exp .

    CMP  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    CMP       [reduce using rule 19 (exp)]
    '+'       [reduce using rule 19 (exp)]
    '-'       [reduce using rule 19 (exp)]
    '*'       [reduce using rule 19 (exp)]
    '/'       [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)


State 18

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   16    | '-' exp .

    $default  reduce using rule 16 (exp)


State 19

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   14    | '(' exp . ')'

    CMP  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    ')'  shift, and go to state 33


State 20

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   15    | '{' exp . '}'

    CMP  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28
    '}'  shift, and go to state 34


State 21

   25 topList: topList stmt EOI .

    $default  reduce using rule 25 (topList)


State 22

    5 stmt: stmt ';' . stmt
    6     | stmt ';' .

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    IF    shift, and go to state 5
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    $default  reduce using rule 6 (stmt)

    stmt  go to state 35
    exp   go to state 12


State 23

    4 stmt: exp AND . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 36


State 24

    9 exp: exp CMP . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 37


State 25

   10 exp: exp '+' . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 38


State 26

   11 exp: exp '-' . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 39


State 27

   12 exp: exp '*' . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 40


State 28

   13 exp: exp '/' . exp

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    exp  go to state 41


State 29

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   21    | NAME '=' exp .

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 21 (exp)


State 30

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   22    | NAME ASSIGN1 exp .

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 22 (exp)


State 31

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   23    | NAME ASSIGN2 exp .

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 23 (exp)


State 32

    1 stmt: IF exp THEN . list
    2     | IF exp THEN . list ELSE list

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    $default  reduce using rule 7 (list)

    list  go to state 42
    exp   go to state 43


State 33

   14 exp: '(' exp ')' .

    $default  reduce using rule 14 (exp)


State 34

   15 exp: '{' exp '}' .

    $default  reduce using rule 15 (exp)


State 35

    5 stmt: stmt . ';' stmt
    5     | stmt ';' stmt .
    6     | stmt . ';'

    ';'  shift, and go to state 22

    ';'       [reduce using rule 5 (stmt)]
    $default  reduce using rule 5 (stmt)


State 36

    4 stmt: exp AND exp .
    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp

    CMP  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 4 (stmt)


State 37

    9 exp: exp . CMP exp
    9    | exp CMP exp .
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    CMP  error (nonassociative)

    $default  reduce using rule 9 (exp)


State 38

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   10    | exp '+' exp .
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 10 (exp)


State 39

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   11    | exp '-' exp .
   12    | exp . '*' exp
   13    | exp . '/' exp

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 11 (exp)


State 40

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   12    | exp '*' exp .
   13    | exp . '/' exp

    $default  reduce using rule 12 (exp)


State 41

    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp
   13    | exp '/' exp .

    $default  reduce using rule 13 (exp)


State 42

    1 stmt: IF exp THEN list .
    2     | IF exp THEN list . ELSE list

    ELSE  shift, and go to state 44

    $default  reduce using rule 1 (stmt)


State 43

    8 list: exp .
    9 exp: exp . CMP exp
   10    | exp . '+' exp
   11    | exp . '-' exp
   12    | exp . '*' exp
   13    | exp . '/' exp

    CMP  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26
    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 8 (list)


State 44

    2 stmt: IF exp THEN list ELSE . list

    NUM   shift, and go to state 3
    NAME  shift, and go to state 4
    SKIP  shift, and go to state 6
    INT   shift, and go to state 7
    '-'   shift, and go to state 8
    '('   shift, and go to state 9
    '{'   shift, and go to state 10

    $default  reduce using rule 7 (list)

    list  go to state 45
    exp   go to state 43


State 45

    2 stmt: IF exp THEN list ELSE list .

    $default  reduce using rule 2 (stmt)
